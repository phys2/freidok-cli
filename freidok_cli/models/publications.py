# generated by datamodel-codegen:
#   filename:  schema_publications.json
#   timestamp: 2023-02-07T13:07:57+00:00

from __future__ import annotations

from typing import Annotated, Any, Optional

from pydantic import BaseModel, Extra, Field


class CreatedBy(BaseModel):
    """
    Information about creator. ONLY VISIBLE FOR ADMINS OR CREATOR.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    type of authentification
    """
    type_value: Optional[str] = None
    """
    language-dependend description for type of authentification
    """
    value: Optional[int] = None
    """
    user-id of the creator
    """
    forename: Optional[str] = None
    """
    firstname of the creator
    """
    surname: Optional[str] = None
    """
    lastname of the  creator
    """
    shib_id: Optional[str] = None
    """
    eppn of the creator
    """
    creator_tan_person_id: Optional[int] = None
    """
    lopes-ID of the creator
    """


class Abstract(BaseModel):
    """
    Entry for an abstract
    """

    class Config:
        extra = Extra.allow

    language: Optional[str] = None
    """
    attribute-id of the language
    """
    language_value: Optional[str] = None
    """
    language-dependend description of the language
    """
    value: Optional[str] = None
    """
    Content of the abstract
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class ResearchdataDescription(BaseModel):
    """
    Entry for a researchdata-description
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of type of description-content
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the type of description-content
    """
    value: Optional[str] = None
    """
    the research-description
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class Description(BaseModel):
    """
    Entry for a generic description.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of type of general description
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the type of general description
    """
    value: Optional[str] = None
    """
    the description
    """
    datacite: Optional[str] = None
    """
    mapping to Datacite's metadata-schema
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class Message(BaseModel):
    """
    Entry for a message.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of type of message.
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the type of message.
    """
    value: Optional[str] = None
    """
    the message (or comment)
    """


class Classification(BaseModel):
    """
    Entry for a classification-asssignment.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the referenced classification
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the referenced classification
    """
    norm_id: Optional[str] = None
    """
    id of the classification's category to assign
    """
    value: Optional[str] = None
    """
    description of the classification's category to assign
    """
    value_long: Optional[str] = None
    """
    long description (e.g. with parent categories) of the classifications category to assign
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class Funding(BaseModel):
    """
    Entry for an funder of the publication
    """

    class Config:
        extra = Extra.allow

    norm_id: Optional[int] = None
    """
    FreiDok plus identifier for the insitutiton
    """
    value: Optional[str] = None
    """
    Name of the institution
    """
    fundref_id: Optional[str] = None
    """
    FundRef-ID
    """
    grantnumber: Optional[str] = None
    """
    grantnumber
    """
    link: Optional[str] = None
    """
    url to the FreiDok plus institution
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class PubId(BaseModel):
    """
    Entry for an identifier of the publication
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the type of identifier
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the type of identifier
    """
    value: Optional[str] = None
    """
    the identifier
    """
    link: Optional[str] = None
    """
    URL to resolve the identifier
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class PubIdsInternalItem(BaseModel):
    """
    Entry for an internal identifier of the publication.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the type of identifier
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the type of identifier
    """
    value: Optional[str] = None
    """
    the identifier
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class Pubtype(BaseModel):
    """
    type of the publication
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the publication-type
    """
    value: Optional[str] = None
    """
    language-dependend description of the publication-type
    """
    marcxml: Optional[str] = None
    """
    MarcXML-id of the publication-type (mapping for MarcXML)
    """
    datacite: Optional[str] = None
    """
    Datacite-id of the publication-type (mapping for Datacite)
    """


class OaStatus(BaseModel):
    """
    open access status of the publication
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the oa-color
    """
    value: Optional[str] = None
    """
    language-dependend description of the oa-color
    """
    is_oa: Optional[bool] = None
    """
    is open access
    """


class Metadata(BaseModel):
    """
    object for state of review of general metadata
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    state of review of general metadata
    """
    value: Optional[str] = None
    """
    language-dependend description of state of review of general metadata
    """


class Tech(BaseModel):
    """
    object for state of review of technical metadata
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    state of review of technical metadata
    """
    value: Optional[str] = None
    """
    language-dependend description of state of review of technical metadata
    """


class Content(BaseModel):
    """
    object for state of review of metadata with regards to content
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    state of review of metadata with regards to content
    """
    value: Optional[str] = None
    """
    language-dependend description of state of review of metadata with regards to content
    """


class Legal(BaseModel):
    """
    object for state of review of legal metadata
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    state of review of legal metadata
    """
    value: Optional[str] = None
    """
    language-dependend description of state of review of legal metadata
    """


class State(BaseModel):
    """
    state of review and public availability
    """

    class Config:
        extra = Extra.allow

    metadata: Optional[Metadata] = None
    """
    object for state of review of general metadata
    """
    tech: Optional[Tech] = None
    """
    object for state of review of technical metadata
    """
    content: Optional[Content] = None
    """
    object for state of review of metadata with regards to content
    """
    legal: Optional[Legal] = None
    """
    object for state of review of legal metadata
    """


class Issued(BaseModel):
    """
    issued-status of the publication
    """

    class Config:
        extra = Extra.allow

    value: Optional[bool] = None
    """
    if the publication is already visible online
    """


class Locked(BaseModel):
    """
    locked-status of the publication
    """

    class Config:
        extra = Extra.allow

    value: Optional[bool] = None
    """
    if the publication can be edited by authorized users
    """


class Peerreviewed(BaseModel):
    """
    peerreviewed-status of the publication
    """

    class Config:
        extra = Extra.allow

    value: Optional[bool] = None
    """
    if the publication is peerreviewed
    """


class Fachsigel(BaseModel):
    """
    fachsigel. ONLY VISIBLE FOR ADMINS.
    """

    class Config:
        extra = Extra.allow

    norm_id: Optional[str] = None
    """
    id of the fachsigel
    """
    value: Optional[str] = None
    """
    description (name) of the fachsigel
    """


class AcquisitionType(BaseModel):
    """
    acquisition type
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the acquisition type
    """
    value: Optional[str] = None
    """
    description (name) of the acquisition type
    """


class SubmissionType(BaseModel):
    """
    information about how the publication was submitted. ONLY VISIBLE FOR ADMINS.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the submission-type
    """
    value: Optional[str] = None
    """
    name (description) of the submission-type
    """


class Keyword(BaseModel):
    """
    Entry for a keyword from GND
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the referred catalog (currently only k_gnd available)
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the referred catalog 
    """
    norm_id: Optional[str] = None
    """
    id of the catalog's keyword to assign
    """
    value: Optional[str] = None
    """
    description of the catalog's keyword to assign
    """
    mode: Optional[str] = None
    """
    type of keyword.
    """
    mode_value: Optional[str] = None
    """
    description of type of keyword
    """
    link: Optional[str] = None
    """
    url to the keyword in the catalog
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class KeywordsUncontrolledItem(BaseModel):
    """
    Entry for a free keyword
    """

    class Config:
        extra = Extra.allow

    language: Optional[str] = None
    """
    attribute-id of the language
    """
    language_value: Optional[str] = None
    """
    language-dependend description of the language
    """
    value: Optional[str] = None
    """
    the keyword
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class Language(BaseModel):
    """
    Entry for a language-assignment
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the language
    """
    value: Optional[str] = None
    """
    language-dependend description of the language
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class Edition(BaseModel):
    """
    Edition/Version of the publication
    """

    class Config:
        extra = Extra.allow

    value: Optional[str] = None
    """
    the edition/version of the publication
    """


class PublicationYear(BaseModel):
    """
    Publication-year of the publication.
    """

    class Config:
        extra = Extra.allow

    value: Optional[int] = None
    """
    the publication-year of the publication.
    """


class DayOfExam(BaseModel):
    """
    day of exam. ONLY VISIBLE IF pubtype=doctoral_thesis.
    """

    class Config:
        extra = Extra.allow

    date: Optional[str] = None
    """
    date in the format YYYY-MM-DD
    """
    value: Optional[str] = None
    """
    date in the format DD.MM.YYYY
    """


class DateSubmitted(BaseModel):
    """
    time of submission of the publication in FreiDok plus
    """

    class Config:
        extra = Extra.allow

    timestamp: Optional[int] = None
    """
    unix-timestamp
    """
    value: Optional[str] = None
    """
    timestamp in the format DD.MM.YYYY HH:mm
    """


class DateUpdated(BaseModel):
    """
    time of last change of metadata of the publication in FreiDok plus
    """

    class Config:
        extra = Extra.allow

    timestamp: Optional[int] = None
    """
    unix-timestamp
    """
    value: Optional[str] = None
    """
    timestamp in the format DD.MM.YYYY HH:mm
    """


class DateIssued(BaseModel):
    """
    time of the publication being visible online the first time in FreiDok plus
    """

    class Config:
        extra = Extra.allow

    timestamp: Optional[int] = None
    """
    unix-timestamp
    """
    value: Optional[str] = None
    """
    timestamp in the format DD.MM.YYYY HH:mm
    """


class SystemTime(BaseModel):
    """
    timestamps for different events during publication processs
    """

    class Config:
        extra = Extra.allow

    date_submitted: Optional[DateSubmitted] = None
    """
    time of submission of the publication in FreiDok plus
    """
    date_updated: Optional[DateUpdated] = None
    """
    time of last change of metadata of the publication in FreiDok plus
    """
    date_issued: Optional[DateIssued] = None
    """
    time of the publication being visible online the first time in FreiDok plus
    """


class Title(BaseModel):
    """
    Entry for a title
    """

    class Config:
        extra = Extra.allow

    language: Optional[str] = None
    """
    attribute-id of the language
    """
    language_value: Optional[str] = None
    """
    language-dependend description of the language
    """
    value: Optional[str] = None
    """
    the title
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class TitleParent(BaseModel):
    """
    Entry of a publication-reference
    """

    class Config:
        extra = Extra.allow

    norm_id: Optional[int] = None
    """
    publication-id of the referenced publication
    """
    value: Optional[str] = None
    """
    (first) title of the referenced publication
    """
    link: Optional[str] = None
    """
    url to the referenced publication
    """


class NameForm(BaseModel):
    """
    Entry for a name of this person
    """

    class Config:
        extra = Extra.allow

    value: Optional[str] = None
    """
    Full name
    """
    name_no: Optional[int] = None
    """
    no. to identify this entry
    """
    selected: Optional[bool] = None
    """
    if this name of the person is selected for this publication
    """


class Affiliation(BaseModel):
    """
    Entry for an affiliation
    """

    class Config:
        extra = Extra.allow

    norm_id: Optional[int] = None
    """
    FreiDok plus identifier for the insitutiton
    """
    value: Optional[str] = None
    """
    Name of the institution
    """
    sup_no: Optional[int] = None
    """
    Footnote-number matching to an entry in 'affiliations_list'
    """
    lifetime: Optional[str] = None
    """
    Lifetime of the insitution. ONLY VISIBLE IF edit=true.
    """
    link: Optional[str] = None
    """
    Link to the institution's landingpage in FreiDok plus. NOT NEEDED?
    """


class AuthorFunction(BaseModel):
    """
    Function of this person for this publication
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the function
    """
    value: Optional[str] = None
    """
    language-dependend description of the function
    """
    sup_no: Optional[str] = None
    """
    Footnote-character matching to an entry in 'functions_list'
    """


class ImportInfo(BaseModel):
    """
    information about the process of choosing this person for the publication
    """

    class Config:
        extra = Extra.allow

    matching_type: Optional[str] = None
    """
    tells, how the person was chosen: orcid/gnd/name/user/admin
    """
    orcid_imported: Optional[str] = None
    """
    ORCiD, that was provided by import-data
    """
    gnd_imported: Optional[str] = None
    """
    GND-No, that was provided by import-data
    """


class Person(BaseModel):
    """
    Information about a perosn involved in this publication
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the person's role
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the person's role
    """
    norm_id: Optional[int] = None
    """
    id of the person in FreiDok plus
    """
    link: Optional[str] = None
    """
    url to the person's landingpage in FreiDok plus
    """
    is_corresponding_author: Optional[bool] = False
    """
    if the person is one of the corresponding authors of this publication
    """
    marcxml: Optional[str] = None
    """
    MarcXML-id of the person's role (mapping to MarcXML)
    """
    datacite: Optional[str] = None
    """
    Datacite-id of the person's role (mapping to Datacite)
    """
    value: Optional[str] = None
    """
    Full name of the person
    """
    forename: Optional[str] = None
    """
    Forename
    """
    surname: Optional[str] = None
    """
    Last name
    """
    orcid_link: Optional[str] = None
    """
    url to the ORCiD-Entry of the person
    """
    gnd_link: Optional[str] = None
    """
    url to the GND-Entry of the person
    """
    name_forms: Optional[list[NameForm]] = None
    """
    List of available names for this person. ONLY VISIBLE IF edit=true.
    """
    affiliations: Optional[list[Affiliation]] = None
    """
    List of affiliations of this person regarding this publication
    """
    author_function: Annotated[
        Optional[AuthorFunction],
        Field(
            examples=[{"sup_no": "a", "type": "first_author", "value": "Erst-Autor"}]
        ),
    ] = None
    """
    Function of this person for this publication
    """
    import_info: Annotated[
        Optional[ImportInfo],
        Field(
            examples=[
                {
                    "matching_type": "orcid",
                    "orcid_imported": "0000-1234-1234-1323",
                    "gnd_imported": "1108295533",
                }
            ]
        ),
    ] = None
    """
    information about the process of choosing this person for the publication
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class PersonsStat(BaseModel):
    """
    Additional statistical information about the persons for this publication, e.g. total number of persons.
    """

    class Config:
        extra = Extra.allow

    total_count: Optional[int] = None
    """
    Total number of persons belonging to this publication.
    """
    additional_count: Optional[int] = None
    """
    Number of persons, which are not shown, because parameter maxPers was reached.
    """


class AffiliationsListItem(BaseModel):
    """
    Entry for an affiliation.
    """

    class Config:
        extra = Extra.allow

    norm_id: Optional[int] = None
    """
    FreiDok plus identifier for the insitutiton
    """
    value: Optional[str] = None
    """
    Name of the institution
    """
    sup_no: Optional[int] = None
    """
    Footnote-number matching to sup_no of a person's 'affiliations'-list
    """
    lifetime: Optional[str] = None
    """
    Lifetime of the insitution.
    """
    link: Optional[str] = None
    """
    Link to the institution's landingpage in FreiDok plus.
    """


class FunctionsListItem(BaseModel):
    """
    Entry for a function
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the function
    """
    value: Optional[str] = None
    """
    language-dependend description of the function
    """
    sup_no: Optional[str] = None
    """
    Footnote-character matching to sup_no of a person's 'author_function'
    """


class Institution(BaseModel):
    """
    Entry for an institution
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the institution's role
    """
    marcxml: Optional[str] = None
    """
    MarcXML-id of the institution's role (mapping to MarcXML)
    """
    datacite: Optional[str] = None
    """
    Datacite-id of the institution's role (mapping to Datacite)
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the institution's role
    """
    norm_id: Optional[int] = None
    """
    id of the institution in FreiDok plus
    """
    value: Optional[str] = None
    """
    Name of the institution
    """
    link: Optional[str] = None
    """
    url to the institution's landingpage in FreiDok plus
    """
    lifetime: Optional[str] = None
    """
    Lifetime of the insitution. ONLY VISIBLE IF edit=true.
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class Relation(BaseModel):
    """
    An explanation about the purpose of this instance.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    type_value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    target_type: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    target_type_value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    target: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    title: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """


class ReverseRelation(BaseModel):
    """
    An explanation about the purpose of this instance.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    type_value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    norm_id: Optional[int] = None
    """
    An explanation about the purpose of this instance.
    """
    value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    title: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    link: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """


class SourceCompilationItem(BaseModel):
    """
    An explanation about the purpose of this instance.
    """

    class Config:
        extra = Extra.allow

    value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    title: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    source_id: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    source_id_type: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    source_id_type_value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    persons: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    edition: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    place: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    publisher: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    year: Optional[int] = None
    """
    An explanation about the purpose of this instance.
    """
    link: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    series: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    volume: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    issue: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    page: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    series2: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    volume2: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    issue2: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """


class SourceJournalItem(BaseModel):
    """
    An explanation about the purpose of this instance.
    """

    class Config:
        extra = Extra.allow

    value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    title: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    source_id: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    source_id_type: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    source_id_type_value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    place: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    publisher: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    year: Optional[int] = None
    """
    An explanation about the purpose of this instance.
    """
    link: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    series: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    volume: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    issue: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    page: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """


class Publisher(BaseModel):
    """
    Information about the publisher. ONLY VISIBLE IF pubtype IN (book, collection, periodical)
    """

    class Config:
        extra = Extra.allow

    place: Optional[str] = None
    """
    place
    """
    value: Optional[str] = None
    """
    Name of the publisher
    """


class Series(BaseModel):
    """
    Information about the series.
    """

    class Config:
        extra = Extra.allow

    value: Optional[str] = None
    """
    Name of the series
    """
    volume: Optional[str] = None
    """
    Number of name of volume
    """
    issue: Optional[str] = None
    """
    Number of name of issue
    """


class Contract(BaseModel):
    """
    information about contract. ONLY VISIBLE FOR ADMINS.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id for the type of contract
    """
    type_value: Optional[str] = None
    """
    language-dependend description for the type of contract
    """
    value: Optional[str] = None
    """
    the text of the contract. ONLY VISIBLE IF edit=true
    """
    signed_by_type: Optional[str] = None
    """
    attribute-id for the type of signing
    """
    signed_by_type_value: Optional[str] = None
    """
    language-dependend description for the type of signing
    """
    signed_by: Optional[str] = None
    """
    eppn or freidok-person-id of the signing person
    """


class LicenseMetadata(BaseModel):
    """
    license-information applying to metadata
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of the licence-type
    """
    type_value: Optional[str] = None
    """
    language-dependend description of the licence-type
    """
    link: Optional[str] = None
    """
    link to further information about the license
    """


class ContactItem(BaseModel):
    """
    Entry for a contact-facility
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    attribute-id of contact-type
    """
    type_value: Optional[str] = None
    """
    language-dependend description of contact-type
    """
    value: Optional[str] = None
    """
    contact-information
    """


class PreviewImage(BaseModel):
    """
    TODO. An explanation about the purpose of this instance.
    """

    class Config:
        extra = Extra.allow

    thumbnail90: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    thumbnail200: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    thumbnail900: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    link: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """


class FilesStat(BaseModel):
    """
    Additional statistical Information about the files for this publication, e.g. number of available files.
    """

    class Config:
        extra = Extra.allow

    count: Optional[int] = None
    """
    Total number of files for this publication.
    """


class FilesExternalItem(BaseModel):
    """
    An explanation about the purpose of this instance.
    """

    class Config:
        extra = Extra.allow

    value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    type: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    type_value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    link: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """


class License(BaseModel):
    """
    An explanation about the purpose of this instance.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    type_value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    cc_by_name: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    link: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    value: Optional[str] = None
    """
    Full text of the License (only visible for owners and admins)
    """


class Embargo(BaseModel):
    """
    An explanation about the purpose of this instance.
    """

    class Config:
        extra = Extra.allow

    date: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """


class File(BaseModel):
    """
    An explanation about the purpose of this instance.
    """

    class Config:
        extra = Extra.allow

    type: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    type_value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    label: Optional[Any] = None
    """
    An explanation about the purpose of this instance.
    """
    filename: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    link: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    filesize: Optional[int] = None
    """
    An explanation about the purpose of this instance.
    """
    filesize_display: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    preview_image: Optional[PreviewImage] = None
    """
    TODO. An explanation about the purpose of this instance.
    """
    md5sum: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    license: Annotated[
        Optional[License],
        Field(
            examples=[
                {
                    "type": "cc_by",
                    "link": "http://creativecommons.org/licenses/by-nc-nd/4.0/deed.de",
                    "type_value": "Creative Commons CC-BY",
                    "value": "Diese Lizenz bestimmt ...",
                    "cc_by_name": "Autor1",
                }
            ]
        ),
    ] = None
    """
    An explanation about the purpose of this instance.
    """
    embargo: Annotated[
        Optional[Embargo],
        Field(examples=[{"value": "23.08.2018", "date": "2018-08-23"}]),
    ] = None
    """
    An explanation about the purpose of this instance.
    """
    file_state: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    file_state_value: Optional[str] = None
    """
    An explanation about the purpose of this instance.
    """
    position: Optional[int] = None
    """
    position of this entry. ONLY VISIBLE IF edit=true.
    """


class Doc(BaseModel):
    """
    Entry for a single publication.
    """

    class Config:
        extra = Extra.allow

    id: Annotated[Optional[int], Field(ge=1)] = None
    """
    unique publication-ID of FreiDok plus
    """
    link: Annotated[
        Optional[str], Field(examples=["https://freidok.uni-freiburg.de/data/16160"])
    ] = None
    """
    Link to the publication's landingpage in FreiDok plus.
    """
    created_by: Annotated[
        Optional[CreatedBy],
        Field(
            examples=[
                {
                    "value": 12333,
                    "forename": "Peterchen",
                    "surname": "Paulerer",
                    "type": "shib_login",
                    "type_value": "Login per Shibboleth",
                    "shib_id": "bla123@uni-freiburg.de",
                    "creator_tan_person_id": None,
                }
            ]
        ),
    ] = None
    """
    Information about creator. ONLY VISIBLE FOR ADMINS OR CREATOR.
    """
    abstracts: Optional[list[Abstract]] = None
    """
    List of abstracts
    """
    researchdata_descriptions: Optional[list[ResearchdataDescription]] = None
    """
    List of researchdata-descriptions. ONLY VISIBLE IF pubtype=research_data.
    """
    descriptions: Optional[list[Description]] = None
    """
    List of generic descriptions.
    """
    messages: Optional[list[Message]] = None
    """
    List of messages (or comments). ONLY VISIBLE FOR ADMINS.
    """
    classifications: Optional[list[Classification]] = None
    """
    List of classification-assignments for classifications, that are imported to FreiDok plus.
    """
    fundings: Optional[list[Funding]] = None
    """
    List of funding-information for the publication.
    """
    pub_ids: Optional[list[PubId]] = None
    """
    List of identifiers for the publication.
    """
    pub_ids_internal: Optional[list[PubIdsInternalItem]] = None
    """
    List of internal identifiers for the publication. ONLY VISIBLE TO ADMINS. --> PROPOSED TO BE RENAMED TO pub_ids_internal.
    """
    pubtype: Annotated[
        Optional[Pubtype],
        Field(
            examples=[
                {
                    "type": "article",
                    "value": "Wissenschaftlicher Artikel",
                    "datacite": "Text",
                    "marcxml": "article",
                }
            ]
        ),
    ] = None
    """
    type of the publication
    """
    oa_status: Annotated[
        Optional[OaStatus],
        Field(examples=[{"type": "green", "value": "Grün", "is_oa": True}]),
    ] = None
    """
    open access status of the publication
    """
    state: Annotated[
        Optional[State],
        Field(
            examples=[
                {
                    "tech": {"value": "geprüft", "type": "ok"},
                    "metadata": {"value": "geprüft", "type": "ok"},
                    "legal": {"type": "ok", "value": "geprüft"},
                    "content": {"value": "geprüft", "type": "ok"},
                }
            ]
        ),
    ] = None
    """
    state of review and public availability
    """
    issued: Annotated[Optional[Issued], Field(examples=[{"value": True}])] = None
    """
    issued-status of the publication
    """
    locked: Annotated[Optional[Locked], Field(examples=[{"value": True}])] = None
    """
    locked-status of the publication
    """
    peerreviewed: Annotated[
        Optional[Peerreviewed], Field(examples=[{"value": True}])
    ] = None
    """
    peerreviewed-status of the publication
    """
    fachsigel: Annotated[
        Optional[Fachsigel], Field(examples=[{"norm_id": "17", "value": "Biologie"}])
    ] = None
    """
    fachsigel. ONLY VISIBLE FOR ADMINS.
    """
    acquisition_type: Annotated[
        Optional[AcquisitionType],
        Field(examples=[{"type": "in_ub", "value": "in UB erstellt"}]),
    ] = None
    """
    acquisition type
    """
    submission_type: Annotated[
        Optional[SubmissionType],
        Field(examples=[{"value": "Import", "type": "import"}]),
    ] = None
    """
    information about how the publication was submitted. ONLY VISIBLE FOR ADMINS.
    """
    keywords: Optional[list[Keyword]] = None
    """
    List of keywords from the GND (or other normed keyword-catalogs).
    """
    keywords_uncontrolled: Optional[list[KeywordsUncontrolledItem]] = None
    """
    List of free keywords
    """
    languages: Optional[list[Language]] = None
    """
    List of languages assigned to this publication
    """
    edition: Annotated[
        Optional[Edition], Field(examples=[{"value": "Version 1"}])
    ] = None
    """
    Edition/Version of the publication
    """
    publication_year: Annotated[
        Optional[PublicationYear], Field(examples=[{"value": 2018}])
    ] = None
    """
    Publication-year of the publication.
    """
    day_of_exam: Annotated[
        Optional[DayOfExam],
        Field(examples=[{"value": "23.07.2018", "date": "2018-07-23"}]),
    ] = None
    """
    day of exam. ONLY VISIBLE IF pubtype=doctoral_thesis.
    """
    system_time: Annotated[
        Optional[SystemTime],
        Field(
            examples=[
                {
                    "date_submitted": {
                        "value": "23.08.2018 12:10",
                        "timestamp": 1532530695,
                    },
                    "date_issued": {
                        "value": "23.08.2018 12:11",
                        "timestamp": 1535014282,
                    },
                    "date_updated": {
                        "value": "23.08.2018 12:11",
                        "timestamp": 1535014282,
                    },
                }
            ]
        ),
    ] = None
    """
    timestamps for different events during publication processs
    """
    titles: Optional[list[Title]] = None
    """
    List of titles
    """
    title_parents: Optional[list[list[TitleParent]]] = None
    """
    List of arrays, that contain references to parent publications
    """
    persons: Optional[list[Person]] = None
    """
    List of persons involved in this publication
    """
    persons_stat: Annotated[
        Optional[PersonsStat],
        Field(examples=[{"total_count": 6, "additional_count": 1}]),
    ] = None
    """
    Additional statistical information about the persons for this publication, e.g. total number of persons.
    """
    affiliations_list: Optional[list[AffiliationsListItem]] = None
    """
    List of affiliations used by persons in this publication.
    """
    functions_list: Optional[list[FunctionsListItem]] = None
    """
    List of functions used by persons in this publication.
    """
    institutions: Optional[list[Institution]] = None
    """
    List of contributing institutions
    """
    relations: Optional[list[Relation]] = None
    """
    TODO. An explanation about the purpose of this instance.
    """
    reverse_relations: Optional[list[ReverseRelation]] = None
    """
    TODO. An explanation about the purpose of this instance.
    """
    source_compilation: Optional[list[SourceCompilationItem]] = None
    """
    TODO
    """
    source_journal: Optional[list[SourceJournalItem]] = None
    """
    TODO
    """
    publisher: Annotated[
        Optional[Publisher], Field(examples=[{"place": "Berlin", "value": "Springer"}])
    ] = None
    """
    Information about the publisher. ONLY VISIBLE IF pubtype IN (book, collection, periodical)
    """
    series: Optional[list[Series]] = None
    """
    TODO
    """
    contract: Annotated[
        Optional[Contract],
        Field(
            examples=[
                {
                    "value": "Dieser Vertrag regelt...",
                    "type": "contract_author",
                    "type_value": "Autorenvertrag",
                    "signed_by": "eppn@uni-freiburg.de",
                    "signed_by_type": "shib_login",
                    "signed_by_type_value": "Login per Shibboleth",
                }
            ]
        ),
    ] = None
    """
    information about contract. ONLY VISIBLE FOR ADMINS.
    """
    license_metadata: Annotated[
        Optional[LicenseMetadata],
        Field(
            examples=[
                {
                    "type": "cc_0",
                    "type_value": "Creative Commons CC0",
                    "link": "http://creativecommons.org/about/cc0",
                }
            ]
        ),
    ] = None
    """
    license-information applying to metadata
    """
    contact: Optional[list[ContactItem]] = None
    """
    List of facilities of contact to the submitter of the publication
    """
    preview_image: Annotated[
        Optional[PreviewImage],
        Field(
            examples=[
                {
                    "thumbnail200": "https://freidok.uni-freiburg.de/getPreviewImage/16160_200.png",
                    "link": "https://freidok.uni-freiburg.de/getPreviewImage/16160.png",
                    "thumbnail90": "https://freidok.uni-freiburg.de/getPreviewImage/16160_90.png",
                    "thumbnail900": "https://freidok.uni-freiburg.de/getPreviewImage/16160_900.png",
                }
            ]
        ),
    ] = None
    """
    TODO. An explanation about the purpose of this instance.
    """
    files_stat: Annotated[Optional[FilesStat], Field(examples=[{"count": 2}])] = None
    """
    Additional statistical Information about the files for this publication, e.g. number of available files.
    """
    files_external: Optional[list[FilesExternalItem]] = None
    """
    TODO. An explanation about the purpose of this instance.
    """
    files: Optional[list[File]] = None
    """
    TODO. An explanation about the purpose of this instance.
    """


class Publications(BaseModel):
    """
    Schema for the JSON-Output of a List of publications by the API-v1 of FreiDok plus
    """

    class Config:
        extra = Extra.allow

    numFound: Annotated[Optional[int], Field(ge=0)] = None
    """
    Number of searchresults for the given request.
    """
    start: Annotated[Optional[int], Field(ge=0)] = 0
    """
    Offset for the result-list.
    """
    maxRows: Annotated[Optional[int], Field(ge=0, le=100)] = 25
    """
    Maximum number of results per request.
    """
    type: Optional[str] = "publication"
    """
    Describes the type of this JSON-object
    """
    docs: Optional[list[Doc]] = None
    """
    List of found publications.
    """
